name: Integration Tests

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *"

jobs:
  integration:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v4

      # Show Docker versions
      - name: Show Docker & Compose versions
        run: |
          docker --version
          docker compose version

      # Python setup
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      # Dummy env + CI overrides
      - name: Create CI .env and dummy GCS key
        run: |
          # Force root user in CI
          echo "AIRFLOW_UID=0" > .env
          echo "AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow" >> .env
          echo "AIRFLOW__WEBSERVER__WORKER_TMP_DIR=/opt/airflow/tmp" >> .env
          echo "MLFLOW_TRACKING_URI=http://mlflow:5000" >> .env
          echo "MLFLOW_ARTIFACT_URI=file:/opt/airflow/mlruns" >> .env
          echo "GOOGLE_APPLICATION_CREDENTIALS=/opt/airflow/keys/gcs-service-account.json" >> .env
          echo "GCS_BUCKET=dummy-ci-bucket" >> .env

          # Dummy but valid JSON key
          mkdir -p keys airflow/keys
          echo '{"dummy":"true"}' > keys/gcs-service-account.json
          echo '{"dummy":"true"}' > airflow/keys/gcs-service-account.json

      # Prepare CI volumes
      - name: Prepare CI volumes
        run: |
          mkdir -p airflow/logs airflow/artifacts mlruns artifacts airflow/tmp
          chmod -R 777 airflow/logs airflow/artifacts mlruns artifacts airflow/tmp

      # Start Postgres
      - name: Start Postgres
        run: docker compose --env-file .env -f airflow/docker-compose.yaml up -d postgres

      # Wait for Postgres
      - name: Wait for Postgres
        run: |
          echo "⏳ Waiting for Postgres..."
          for i in {1..30}; do
            if docker exec airflow-postgres pg_isready -U airflow -d airflow; then
              echo "✅ Postgres is ready!"
              exit 0
            fi
            sleep 2
          done
          echo "❌ Postgres did not become healthy in time"
          exit 1

      # Init Airflow DB
      - name: Initialize Airflow DB
        run: docker compose --env-file .env -f airflow/docker-compose.yaml run --rm airflow-init

      # Start webserver, scheduler, mlflow (without serve yet)
      - name: Start Airflow + MLflow (no serve yet)
        run: docker compose --env-file .env -f airflow/docker-compose.yaml up -d webserver scheduler mlflow

      # Health checks for Airflow + MLflow
      - name: Wait for Airflow + MLflow to be healthy
        run: |
          echo "⏳ Waiting for Airflow webserver…"
          ok=0
          for i in {1..60}; do
            if curl -sf http://localhost:8080/health | grep -q '"status":"healthy"'; then ok=1; break; fi
            sleep 5
          done
          [ "$ok" -eq 1 ] || { echo "❌ Airflow webserver did not become healthy"; exit 1; }

          echo "⏳ Waiting for MLflow…"
          ok=0
          for i in {1..60}; do
            curl -sf http://localhost:5000 >/dev/null && ok=1 && break
            sleep 3
          done
          [ "$ok" -eq 1 ] || { echo "❌ MLflow did not become reachable"; exit 1; }

      # Bootstrap: Train + register a model in CI
      - name: Bootstrap MLflow model (register dummy model)
        run: |
          docker compose --env-file .env -f airflow/docker-compose.yaml run --rm webserver \
            python src/train_with_mlflow.py \
              --data_path /opt/airflow/data/loan_default_selected_features_clean.csv \
              --model_name loan_default_model --alias staging

      # Now start model-serve
      - name: Start model-serve
        run: docker compose --env-file .env -f airflow/docker-compose.yaml up -d serve

      # Health check for serve
      - name: Wait for Serve API to be healthy
        run: |
          echo "⏳ Waiting for Serve…"
          ok=0
          for i in {1..60}; do
            curl -sf http://localhost:5001/invocations -H "Content-Type: application/json" -d '{"dataframe_split": {"columns": [], "data": []}}' | grep -q 'error_code' && ok=1 && break
            sleep 3
          done
          [ "$ok" -eq 1 ] || { echo "❌ Serve API did not become reachable"; exit 1; }

      # Run integration tests
      - name: Run integration tests (Makefile target)
        run: make integration-tests

      # DAG import check
      - name: Run DAG import check with pytest
        run: docker compose -f airflow/docker-compose.yaml exec -T webserver pytest -q

      # Diagnostics on failure
      - name: Diagnostics (ps + last logs)
        if: failure()
        run: |
          echo "==== docker compose ps ===="
          docker compose -f airflow/docker-compose.yaml ps
          echo
          echo "==== webserver logs (tail) ===="
          docker compose -f airflow/docker-compose.yaml logs --tail=200 webserver || true
          echo
          echo "==== scheduler logs (tail) ===="
          docker compose -f airflow/docker-compose.yaml logs --tail=200 scheduler || true
          echo
          echo "==== mlflow logs (tail) ===="
          docker compose -f airflow/docker-compose.yaml logs --tail=200 mlflow || true
          echo
          echo "==== serve logs (tail) ===="
          docker compose -f airflow/docker-compose.yaml logs --tail=200 serve || true
          echo
          echo "==== postgres logs (tail) ===="
          docker compose -f airflow/docker-compose.yaml logs --tail=100 postgres || true

      # Always clean up
      - name: Stop services
        if: always()
        run: docker compose --env-file .env -f airflow/docker-compose.yaml down -v
