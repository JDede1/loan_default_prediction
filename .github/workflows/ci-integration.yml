name: Integration Tests

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *"

jobs:
  integration:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v4

      # Show Docker + Compose versions
      - name: Show Docker & Compose versions
        run: |
          docker --version
          docker compose version

      # Python setup
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      # Minimal env + dummy GCS key
      - name: Create dummy .env and GCS key
        run: |
          echo "AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow" > .env
          echo "AIRFLOW_UID=50000" >> .env
          mkdir -p keys airflow/keys airflow/logs airflow/artifacts mlruns artifacts
          echo '{}' > keys/gcs-service-account.json
          echo '{}' > airflow/keys/gcs-service-account.json

      # üîß Fix permissions so Airflow & MLflow can write
      - name: Fix permissions for CI volumes
        run: |
          chmod -R 777 airflow/logs airflow/artifacts mlruns artifacts

      # Start Postgres first
      - name: Start Postgres
        run: docker compose --env-file .env -f airflow/docker-compose.yaml up -d postgres

      # Initialize Airflow DB
      - name: Initialize Airflow DB
        run: docker compose --env-file .env -f airflow/docker-compose.yaml run --rm airflow-init

      # Start Airflow + MLflow + Serve
      - name: Start services (webserver, scheduler, mlflow, serve)
        run: docker compose --env-file .env -f airflow/docker-compose.yaml up -d webserver scheduler mlflow serve

      # Wait until services are healthy
      - name: Wait for services to be healthy
        run: |
          echo "‚è≥ Waiting for Airflow webserver‚Ä¶"
          for i in {1..60}; do
            if curl -sf http://localhost:8080/health | grep -q '"status":"healthy"'; then exit 0; fi
            sleep 5
          done
          echo "Airflow webserver did not become healthy"; exit 1

          echo "‚è≥ Waiting for MLflow‚Ä¶"
          for i in {1..60}; do
            curl -sf http://localhost:5000 >/dev/null && exit 0
            sleep 3
          done
          echo "MLflow did not become reachable"; exit 1

          echo "‚è≥ Waiting for Serve‚Ä¶"
          for i in {1..60}; do
            curl -sf http://localhost:5001/invocations -H "Content-Type: application/json" \
              -d '{"dataframe_split": {"columns": [], "data": []}}' | grep -q 'error_code' && exit 0
            sleep 3
          done
          echo "Serve API did not become reachable"; exit 1

      # Run integration tests inside webserver container
      - name: Run integration tests
        run: make integration-tests

      # Dump logs if failure
      - name: Diagnostics (ps + last logs)
        if: failure()
        run: |
          echo "==== docker compose ps ===="
          docker compose -f airflow/docker-compose.yaml ps
          echo
          echo "==== webserver logs ===="
          docker compose -f airflow/docker-compose.yaml logs --tail=200 webserver || true
          echo
          echo "==== scheduler logs ===="
          docker compose -f airflow/docker-compose.yaml logs --tail=200 scheduler || true
          echo
          echo "==== mlflow logs ===="
          docker compose -f airflow/docker-compose.yaml logs --tail=200 mlflow || true
          echo
          echo "==== serve logs ===="
          docker compose -f airflow/docker-compose.yaml logs --tail=200 serve || true
          echo
          echo "==== postgres logs ===="
          docker compose -f airflow/docker-compose.yaml logs --tail=100 postgres || true

      # Always shut down
      - name: Stop services
        if: always()
        run: docker compose --env-file .env -f airflow/docker-compose.yaml down -v
