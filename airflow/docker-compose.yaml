name: airflow

volumes:
  postgres-db-volume:
  airflow-logs:
  airflow-artifacts:
  airflow-tmp:
  mlflow-data:     # still used for MLflow DB & cache
  mlflow-runs:     # ✅ shared volume for MLflow model registry

networks:
  airflow:
    driver: bridge

services:
  postgres:
    image: postgres:13
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
      POSTGRES_DB: ${POSTGRES_DB:-airflow}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-airflow} -d ${POSTGRES_DB:-airflow}"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks: [airflow]

  airflow-init:
    build:
      context: ..
      dockerfile: Dockerfile.airflow
    image: loan-default-airflow:latest
    container_name: airflow-init
    depends_on:
      - postgres
    env_file:
      - ../.env
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/${POSTGRES_DB:-airflow}
    command: >
      bash -c "airflow db migrate &&
               airflow variables import /opt/airflow/variables.json &&
               bash /opt/airflow/create_airflow_user.sh"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ../src:/opt/airflow/src
      - ../data:/opt/airflow/data
      - ../tests:/opt/airflow/tests
      - ../pytest.ini:/opt/airflow/pytest.ini
      - ../keys/gcs-service-account.json:/opt/airflow/keys/gcs-service-account.json
      - ../requirements-dev.txt:/opt/airflow/requirements-dev.txt
      - ./artifacts:/opt/airflow/artifacts
      - ../airflow/create_airflow_user.sh:/opt/airflow/create_airflow_user.sh
      - ../airflow/variables.json:/opt/airflow/variables.json
      - airflow-tmp:/opt/airflow/tmp
      - mlflow-runs:/opt/airflow/mlruns
    networks: [airflow]
    restart: "no"

  webserver:
    image: loan-default-airflow:latest
    container_name: airflow-webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    env_file:
      - ../.env
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/${POSTGRES_DB:-airflow}
      PYTHONPATH: /opt/airflow:/opt/airflow/src
      GOOGLE_APPLICATION_CREDENTIALS: /opt/airflow/keys/gcs-service-account.json
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ../src:/opt/airflow/src
      - ../data:/opt/airflow/data
      - ../tests:/opt/airflow/tests
      - ../pytest.ini:/opt/airflow/pytest.ini
      - ../keys/gcs-service-account.json:/opt/airflow/keys/gcs-service-account.json
      - ../requirements.serve.txt:/opt/airflow/requirements.serve.txt
      - ../requirements-dev.txt:/opt/airflow/requirements-dev.txt
      - ./artifacts:/opt/airflow/artifacts
      - ../airflow/variables.json:/opt/airflow/variables.json
      - airflow-tmp:/opt/airflow/tmp
      - mlflow-runs:/opt/airflow/mlruns
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 12
    command: ["airflow", "webserver"]
    networks: [airflow]
    restart: unless-stopped

  scheduler:
    image: loan-default-airflow:latest
    container_name: airflow-scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    env_file:
      - ../.env
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/${POSTGRES_DB:-airflow}
      PYTHONPATH: /opt/airflow:/opt/airflow/src
      GOOGLE_APPLICATION_CREDENTIALS: /opt/airflow/keys/gcs-service-account.json
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ../src:/opt/airflow/src
      - ../data:/opt/airflow/data
      - ../tests:/opt/airflow/tests
      - ../pytest.ini:/opt/airflow/pytest.ini
      - ../keys/gcs-service-account.json:/opt/airflow/keys/gcs-service-account.json
      - ../requirements.serve.txt:/opt/airflow/requirements.serve.txt
      - ../requirements-dev.txt:/opt/airflow/requirements-dev.txt
      - ./artifacts:/opt/airflow/artifacts
      - ../airflow/variables.json:/opt/airflow/variables.json
      - airflow-tmp:/opt/airflow/tmp
      - mlflow-runs:/opt/airflow/mlruns
    command: ["airflow", "scheduler"]
    networks: [airflow]
    restart: unless-stopped

  mlflow:
    build:
      context: ../MLflow
      dockerfile: Dockerfile.mlflow
    image: loan-default-mlflow:latest
    container_name: mlflow
    environment:
      BACKEND_URI: postgresql+psycopg2://${POSTGRES_USER:-airflow}:${POSTGRES_PASSWORD:-airflow}@postgres/mlflow
      ARTIFACT_ROOT: ${MLFLOW_ARTIFACT_URI:-gs://loan-default-artifacts-loan-default-mlops/mlflow}
      GOOGLE_APPLICATION_CREDENTIALS: /opt/airflow/keys/gcs-service-account.json
    volumes:
      - mlflow-data:/mlflow-data
      - mlflow-runs:/opt/airflow/mlruns
      - ../keys/gcs-service-account.json:/opt/airflow/keys/gcs-service-account.json:ro
    ports:
      - "5000:5000"
    networks: [airflow]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5000"]
      interval: 10s
      timeout: 5s
      retries: 10

  serve:
    build:
      context: ..
      dockerfile: Dockerfile.serve
    image: loan-default-serve:latest
    container_name: airflow-serve
    env_file:
      - ../.env
    environment:
      MODEL_NAME: ${MODEL_NAME:-loan_default_model}
      MODEL_ALIAS: ${MODEL_ALIAS:-staging}
      PORT: 5001
      MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI:-http://mlflow:5000}
    volumes:
      - ../entrypoint_serve.sh:/opt/airflow/entrypoint_serve.sh
      - mlflow-runs:/opt/airflow/mlruns
    command: ["bash", "/opt/airflow/entrypoint_serve.sh"]
    ports:
      - "5001:5001"
    networks: [airflow]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5001/invocations"]
      interval: 10s
      timeout: 5s
      retries: 20

  # ✅ Init container to fix mlflow-runs permissions
  fix-mlflow-runs:
    image: alpine:3.19
    user: "0:0"
    volumes:
      - mlflow-runs:/opt/airflow/mlruns
    command: sh -c "chown -R 50000:50000 /opt/airflow/mlruns && chmod -R 777 /opt/airflow/mlruns"
    networks: [airflow]
