name: airflow  

volumes:
  postgres-db-volume:
  airflow-logs:
  mlflow-runs:        # still used for backend store
  airflow-artifacts:
  airflow-tmp:        # ✅ new volume for tmp dir

networks:
  airflow:
    driver: bridge

services:
  postgres:
    image: postgres:13
    platform: linux/amd64
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
      POSTGRES_DB: ${POSTGRES_DB:-airflow}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-airflow} -d ${POSTGRES_DB:-airflow}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    networks:
      - airflow

  airflow-init:
    build:
      context: ..
      dockerfile: Dockerfile.airflow
    platform: linux/amd64
    container_name: airflow-init
    user: "${AIRFLOW_UID:-50000}:0"
    env_file:
      - ../.env
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/mlruns /opt/airflow/artifacts /home/airflow/logs /opt/airflow/tmp
        chown -R airflow:root /opt/airflow/mlruns /opt/airflow/artifacts /home/airflow/logs /opt/airflow/tmp
        chmod -R 775 /opt/airflow/mlruns /opt/airflow/artifacts /home/airflow/logs /opt/airflow/tmp
        if jq -e '.client_email' /opt/airflow/keys/gcs-service-account.json >/dev/null 2>&1; then
          gcloud auth activate-service-account --key-file=/opt/airflow/keys/gcs-service-account.json
        else
          echo "⚠️ Skipping gcloud auth (dummy or invalid key detected)"
        fi
        airflow db init &&
        bash /opt/airflow/create_airflow_user.sh || true
    volumes:
      - ./:/opt/airflow
      - ../src:/opt/airflow/src
      - ../data:/opt/airflow/data
      - ../tests:/opt/airflow/tests
      - ../pytest.ini:/opt/airflow/pytest.ini:ro
      - airflow-artifacts:/opt/airflow/artifacts
      - mlflow-runs:/opt/airflow/mlruns
      - airflow-logs:/home/airflow/logs
      - airflow-tmp:/opt/airflow/tmp
      - ../keys/gcs-service-account.json:/opt/airflow/keys/gcs-service-account.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - airflow
    restart: "no"

  webserver:
    build:
      context: ..
      dockerfile: Dockerfile.airflow
    platform: linux/amd64
    container_name: airflow-webserver
    user: "${AIRFLOW_UID:-50000}:0"
    env_file:
      - ../.env
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    entrypoint: /bin/bash
    command:
      - -c
      - |
        rm -f /home/airflow/airflow-webserver.pid || true
        mkdir -p /home/airflow/logs /opt/airflow/mlruns /opt/airflow/artifacts /opt/airflow/tmp
        chown -R airflow:root /home/airflow/logs /opt/airflow/mlruns /opt/airflow/artifacts /opt/airflow/tmp
        chmod -R 775 /home/airflow/logs /opt/airflow/mlruns /opt/airflow/artifacts /opt/airflow/tmp
        if jq -e '.client_email' /opt/airflow/keys/gcs-service-account.json >/dev/null 2>&1; then
          gcloud auth activate-service-account --key-file=/opt/airflow/keys/gcs-service-account.json
        else
          echo "⚠️ Skipping gcloud auth (dummy or invalid key detected)"
        fi
        exec airflow webserver
    ports:
      - "8080:8080"
    volumes:
      - ./:/opt/airflow
      - ../src:/opt/airflow/src
      - ../data:/opt/airflow/data
      - ../tests:/opt/airflow/tests
      - ../pytest.ini:/opt/airflow/pytest.ini:ro
      - airflow-artifacts:/opt/airflow/artifacts
      - mlflow-runs:/opt/airflow/mlruns
      - airflow-logs:/home/airflow/logs
      - airflow-tmp:/opt/airflow/tmp
      - /var/run/docker.sock:/var/run/docker.sock
      - ../keys/gcs-service-account.json:/opt/airflow/keys/gcs-service-account.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 15
    networks:
      - airflow
    restart: always

  scheduler:
    build:
      context: ..
      dockerfile: Dockerfile.airflow
    platform: linux/amd64
    container_name: airflow-scheduler
    user: "${AIRFLOW_UID:-50000}:0"
    env_file:
      - ../.env
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /home/airflow/logs /opt/airflow/mlruns /opt/airflow/artifacts /opt/airflow/tmp
        chown -R airflow:root /home/airflow/logs /opt/airflow/mlruns /opt/airflow/artifacts /opt/airflow/tmp
        chmod -R 775 /home/airflow/logs /opt/airflow/mlruns /opt/airflow/artifacts /opt/airflow/tmp
        if jq -e '.client_email' /opt/airflow/keys/gcs-service-account.json >/dev/null 2>&1; then
          gcloud auth activate-service-account --key-file=/opt/airflow/keys/gcs-service-account.json
        else
          echo "⚠️ Skipping gcloud auth (dummy or invalid key detected)"
        fi
        exec airflow scheduler
    volumes:
      - ./:/opt/airflow
      - ../src:/opt/airflow/src
      - ../data:/opt/airflow/data
      - ../tests:/opt/airflow/tests
      - ../pytest.ini:/opt/airflow/pytest.ini:ro
      - airflow-artifacts:/opt/airflow/artifacts
      - mlflow-runs:/opt/airflow/mlruns
      - airflow-logs:/home/airflow/logs
      - airflow-tmp:/opt/airflow/tmp
      - /var/run/docker.sock:/var/run/docker.sock
      - ../keys/gcs-service-account.json:/opt/airflow/keys/gcs-service-account.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - airflow
    restart: always

  mlflow:
    image: ghcr.io/mlflow/mlflow:v3.1.4
    platform: linux/amd64
    container_name: mlflow
    user: "${AIRFLOW_UID:-50000}:0"
    ports:
      - "5000:5000"
    volumes:
      - mlflow-runs:/opt/airflow/mlruns
    command: >
      mlflow server 
      --backend-store-uri file:/opt/airflow/mlruns
      --default-artifact-root gs://loan-default-artifacts-loan-default-mlops/mlflow
      --host 0.0.0.0 --port 5000
    networks:
      - airflow

  serve:
    build:
      context: ..
      dockerfile: Dockerfile.serve
    platform: linux/amd64
    container_name: model-serve
    ports:
      - "5001:5001"
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      GOOGLE_APPLICATION_CREDENTIALS: /opt/airflow/keys/gcs-service-account.json
      MODEL_NAME: loan_default_model
      MODEL_ALIAS: staging   # change to production when promoting
      PORT: 5001
    volumes:
      - ../keys/gcs-service-account.json:/opt/airflow/keys/gcs-service-account.json:ro
    depends_on:
      - mlflow
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5001/ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - airflow
      
  terraform:
    build:
      context: ..
      dockerfile: Dockerfile.terraform
    platform: linux/amd64
    container_name: terraform
    working_dir: /infra/terraform
    volumes:
      - ../infra/terraform:/infra/terraform
      - ../keys/gcs-service-account.json:/opt/airflow/keys/gcs-service-account.json:ro
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /opt/airflow/keys/gcs-service-account.json
    entrypoint: ["/bin/bash", "-c"]
    networks:
      - airflow
