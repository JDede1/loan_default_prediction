name: airflow

volumes:
  postgres-db-volume:
  airflow-logs:
  mlflow-runs:          # backend store for MLflow
  airflow-artifacts:
  airflow-tmp:

networks:
  airflow:
    driver: bridge

# ======================================================
# Shared Airflow build configuration (reused by init/web/scheduler)
# ======================================================
x-airflow-common:
  &airflow-common
  image: loan-default-airflow:latest
  build:
    context: ..
    dockerfile: Dockerfile.airflow
  platform: linux/amd64
  env_file:
    - ../.env
  user: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  volumes:
    - /workspaces/loan_default_prediction/airflow/dags:/opt/airflow/dags
    - airflow-artifacts:/opt/airflow/artifacts
    - mlflow-runs:/opt/airflow/mlruns
    - airflow-logs:/opt/airflow/logs
    - airflow-tmp:/opt/airflow/tmp
    - ../keys/gcs-service-account.json:/opt/airflow/keys/gcs-service-account.json:ro
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    - airflow
  environment:
    # Ensure Airflow binary is resolved correctly
    PATH: /home/airflow/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin

services:
  postgres:
    image: postgres:13
    platform: linux/amd64
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-airflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
      POSTGRES_DB: ${POSTGRES_DB:-airflow}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-airflow} -d ${POSTGRES_DB:-airflow}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    networks:
      - airflow

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/mlruns /opt/airflow/artifacts /opt/airflow/logs /opt/airflow/tmp
        airflow db migrate
        bash /opt/airflow/create_airflow_user.sh
    restart: "no"

  webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    ports:
      - "8080:8080"
    entrypoint: /bin/bash
    command:
      - -c
      - |
        rm -f /opt/airflow/airflow-webserver.pid || true
        exec airflow webserver
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 60s
    restart: always

  scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    entrypoint: /bin/bash
    command:
      - -c
      - |
        exec airflow scheduler
    restart: always

  mlflow:
    image: ghcr.io/mlflow/mlflow:v3.1.4
    platform: linux/amd64
    container_name: mlflow
    user: "0:0"   # âœ… run as root to avoid volume permission issues
    env_file:
      - ../.env
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /opt/airflow/keys/gcs-service-account.json
    ports:
      - "5000:5000"
    volumes:
      - mlflow-runs:/opt/airflow/mlruns
      - ../keys/gcs-service-account.json:/opt/airflow/keys/gcs-service-account.json:ro
    command: >
      mlflow server --backend-store-uri file:/opt/airflow/mlruns
        --default-artifact-root gs://loan-default-artifacts-loan-default-mlops/mlflow
        --host 0.0.0.0 --port 5000
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5000" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - airflow

  serve:
    build:
      context: ..
      dockerfile: Dockerfile.serve
    platform: linux/amd64
    container_name: model-serve
    ports:
      - "5001:5001"
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      GOOGLE_APPLICATION_CREDENTIALS: /opt/airflow/keys/gcs-service-account.json
      MODEL_NAME: loan_default_model
      MODEL_ALIAS: staging
      PORT: 5001
    volumes:
      - ../keys/gcs-service-account.json:/opt/airflow/keys/gcs-service-account.json:ro
    depends_on:
      - mlflow
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5001/ping" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - airflow

  monitor:
    build:
      context: ..
      dockerfile: Dockerfile.monitor
    platform: linux/amd64
    container_name: airflow-monitor
    volumes:
      - ../src:/opt/airflow/src
      - ../data:/opt/airflow/data
      - ../keys/gcs-service-account.json:/opt/airflow/keys/gcs-service-account.json:ro
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /opt/airflow/keys/gcs-service-account.json
    networks:
      - airflow

  terraform:
    build:
      context: ..
      dockerfile: Dockerfile.terraform
    platform: linux/amd64
    container_name: terraform
    working_dir: /infra/terraform
    volumes:
      - ../infra/terraform:/infra/terraform
      - ../keys/gcs-service-account.json:/opt/airflow/keys/gcs-service-account.json:ro
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /opt/airflow/keys/gcs-service-account.json
    entrypoint: [ "/bin/bash", "-c" ]
    networks:
      - airflow
